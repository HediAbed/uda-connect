version: '3'

services:

  postgres:
    image: postgis/postgis:12-2.5-alpine
    container_name: postgres
    restart: always
    environment:
    - POSTGRES_USER=ct_admin
    - POSTGRES_PASSWORD=wowimsosecure
    - POSTGRES_DB=geoconnections
    ports:
    - "5432:5432"
    volumes:
    - postgres:/var/lib/postgresql/data

  location_ms_postgres:
    image: postgis/postgis:12-2.5-alpine
    container_name: location_ms_postgres
    restart: always
    environment:
    - POSTGRES_USER=ct_admin
    - POSTGRES_PASSWORD=wowimsosecure
    - POSTGRES_DB=location
    ports:
    - "5434:5432"
    volumes:
    - location_ms_postgres:/var/lib/postgresql/data

  person_ms_postgres:
    image: postgis/postgis:12-2.5-alpine
    container_name: person_ms_postgres
    restart: always
    environment:
    - POSTGRES_USER=ct_admin
    - POSTGRES_PASSWORD=wowimsosecure
    - POSTGRES_DB=person
    ports:
    - "5436:5432"
    volumes:
    - person_ms_postgres:/var/lib/postgresql/data

  connection_ms:
    build: connection_ms
    container_name: connection_ms
    command: [ "flask", "run", "--host=0.0.0.0" ]
    volumes:
      - ./connection_ms:/backend
    environment:
      - RPC_LOCATION_SERVER=location_ms
      - RPC_LOCATION_PORT=5005
      - RPC_PERSON_SERVER=person_ms
      - RPC_PERSON_PORT=5005
    ports:
      - "5004:5000"
      - "5007:5005"
    depends_on:
      - person_ms
      - location_ms

  person_ms:
    build: person_ms
    container_name: person_ms
    command: [ "flask", "run", "--host=0.0.0.0" ]
    volumes:
      - ./person_ms:/backend
    environment:
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=person
      - DB_HOST=person_ms_postgres
      - DB_PORT=5432
    ports:
      - "5003:5000"
      - "5006:5005"
    depends_on:
      - person_ms_postgres

  location_ms:
    build: location_ms
    container_name: location_ms
    command: [ "flask", "run", "--host=0.0.0.0" ]
    volumes:
      - ./location_ms:/backend
    environment:
      - RPC_PERSON_SERVER=person_ms
      - RPC_PERSON_PORT=5005
      - TOPIC_LOCATION=location_events
      - KAFKA_SERVER=uda_connect_kafka:9092
      - DB_USERNAME=ct_admin
      - DB_PASSWORD=wowimsosecure
      - DB_NAME=location
      - DB_HOST=location_ms_postgres
      - DB_PORT=5432
    ports:
      - "5001:5000"
      - "5005:5005"
    depends_on:
      - location_ms_postgres
      - uda_connect_kafka
      - uda_connect_zookeeper
      - person_ms


  location_events:
    build: location_events
    container_name: location_events
    command: [ "flask", "run", "--host=0.0.0.0" ]
    volumes:
      - ./location_events:/backend
    environment:
      - TOPIC_LOCATION=location_events
      - KAFKA_SERVER=uda_connect_kafka:9092
    ports:
      - "5002:5000"
    depends_on:
      - uda_connect_kafka
      - uda_connect_zookeeper


  # api:
  #   build: api
  #   command: ["flask", "run", "--host=0.0.0.0"]
  #   volumes:
  #     - ./api:/backend
  #   environment:
  #     - DB_USERNAME=ct_admin
  #     - DB_PASSWORD=wowimsosecure
  #     - DB_NAME=geoconnections
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #   ports:
  #     - "5000:5000"
  #   depends_on:
  #   - postgres

  # client:
  #   tty: true
  #   build: client
  #   command: ["npm", "start"]
  #   volumes:
  #     - ./client:/frontend
  #     - node-modules:/frontend/node_modules
  #   environment:
  #     - NODE_ENV=development
  #   ports:
  #     - '3000:3000'
  #   depends_on:
  #     - api
  api_gateway:
    image: nginx
    container_name: api_gateway
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    volumes:
      - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      # - ./api_gateway/ssl:/etc/nginx/ssl:ro
      # - ./api_gateway/index.html:/app/html:ro


  uda_connect_kafdrop:
    image: obsidiandynamics/kafdrop:3.8.1
    container_name: uda_connect_kafdrop
    depends_on:
      - uda_connect_zookeeper
      - uda_connect_kafka
    expose:
      - 9000
    ports:
      - "9000:9000"
    environment:
      ZOOKEEPER_CONNECT: uda_connect_zookeeper:2181
      KAFKA_BROKERCONNECT: uda_connect_kafka:29092


  uda_connect_zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: uda_connect_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  uda_connect_kafka:
    image: confluentinc/cp-kafka:latest
    container_name: uda_connect_kafka
    depends_on:
      - uda_connect_zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: uda_connect_zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://uda_connect_kafka:29092,PLAINTEXT_HOST://uda_connect_kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
volumes:
  # node-modules:
  postgres: 
  location_ms_postgres:
  person_ms_postgres: